sequenceDiagram
  title Document Upload Flow – CDS System
  
  actor Client as "Client Application"
  participant UR as "UploadResource (REST Controller)"
  participant SRA as "StorageRequestAdapter"
  participant FIDS as "FIDMappingService"
  participant TAI as "TaxonomyApiInvoker"
  participant US as "UploadServiceImpl"
  participant SCMRS as "S3CMStoreRoutingService"
  participant SF as "StrategyFactory"
  participant Strategy as "UploadStrategy"
  participant S3C as "S3StorageCoordinator"
  participant S3 as "S3Client"
  participant CM as "CMStorageCoordinator"
  participant ETMB as "EventToMessageBusBridge"
  participant MQ as "IBM MQ"
  participant DTS as "DTSQueueMonitor"
  
  %% API Request
  Client ->> UR: POST /createDocument/{platform}/{type}
  Note over UR: Security checks via @PreAuthorize
  
  %% Request Processing
  UR ->> SRA: create(platform, type, stream, queryMap, config)
  SRA -->> UR: StorageRequest
  
  UR ->> FIDS: getFIDMapping(platform, sid, service, type)
  FIDS -->> UR: applicationName
  
  %% Document Validation
  UR ->> UR: isDocumentPasswordProtected(storageRequest)
  Note over UR: Checks for encrypted PDFs and\nembedded attachments
  
  %% Service Layer
  UR ->> US: uploadDocument()
  
  %% Taxonomy Resolution
  US ->> TAI: handleTaxonomyRequest(DocTypeRequest)
  TAI -->> US: DocTypeResponse(repository, section)
  
  %% Strategy Selection
  US ->> SCMRS: determineStrategy(request, defaultStrategy)
  Note over SCMRS: Routes between S3, CM, or S3CM\nbased on migration status
  SCMRS -->> US: strategyName
  
  US ->> SF: getStrategy(strategyName)
  SF -->> US: Strategy
  
  %% Strategy Execution
  US ->> Strategy: doOperate().apply(storageRequest)
  
  %% Conditional Storage Path
  alt S3 Storage Strategy
    Strategy ->> S3C: execute()
    S3C ->> S3: putObject(storageClass, bucket, key, data, metadata)
    Note over S3: Stores document in\nAmazon S3 bucket
    S3 -->> S3C: PutObjectResult(versionId)
    S3C -->> Strategy: Updated StorageContext
  else CM Storage Strategy
    Strategy ->> CM: execute()
    Note over CM: Stores document in\nIBM Content Manager
    CM -->> Strategy: Updated StorageContext
  end
  
  %% Response Processing
  Strategy -->> US: "Success<Document>"
  US -->> UR: "Success<Document>"
  
  %% Event Publishing (Async)
  UR ->> ETMB: publish(DocumentCreatedEvent)
  Note over ETMB: @Async @EventListener
  ETMB ->> MQ: send(queueName, SOAPMessage)
  Note over MQ: GTI Message Bus
  
  %% DTS Integration (Conditional)
  alt DTS Integration Enabled
    UR ->> DTS: sendMessageToQ(DTSMessage)
    Note over DTS: Document Tracking\nSystem Integration
    DTS ->> MQ: send(dtsQueue, message)
  else DTS Integration Disabled
    Note over UR: Skipped DTS integration
  end
  
  %% Client Response
  UR -->> Client: JSON Response (document metadata)
  
  %% Footer
  Note over Client,MQ: Flow complete – document stored and events published
